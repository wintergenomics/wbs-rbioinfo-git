[["index.html", "Winter Bioinformatics School Información del curso Formato del curso ¿Quién es nuestra audiencia? Pre-requisitos", " Winter Bioinformatics School Winter School cursos@wintergenomics.com Información del curso ¡Bienvenidos al curso de R para bioinformática de Winter Genomics y Winter School! R es un lenguaje básico de referencia en el mundo de la estadística y una herramienta fundamental para el análisis de datos en el área de las ciencias de la vida. R permite automatizar los cálculos estadísticos y la generación de diversos gráficos para facilitar el análisis de datos. R, al ser uno de los lenguajes más utilizados por científicos en numerosas disciplinas, está diseñado para manipular y analizar grandes cantidades de datos. Durante este curso aprenderás las herramientas básicas de R para analizar datos. Revisaremos qué son los lenguajes de programación, los tipos de lenguajes de programación que existen. Después veremos los tipos de objetos, datos y atributos más usados en R como vectores, matrices, data.frames. Aprenderás a generar proyectos y realizar gráficos de boxplots, scatter plots y heatmaps usando ggplot2. Formato del curso Este es un curso digital donde las sesiones y el material del curso serán en línea. Las sesiones del curso han sido grabadas y se te han compartido en la carpeta de Google Drive, junt con el material y presentaciones del curso al correo que utilizaste al realizar tu registro al curso. ¿Quién es nuestra audiencia? Este curso está diseñado para todos aquellos interesados en adentrarse a la bioinformática, a la programación y al análisis de datos de las ciencias biológicas. El curso es nivel básico, por lo que no es necesario tener conocimientos previos de programación. Pre-requisitos Tener una computadora con al menos 8Gb de memoria y permisos de administrador para instalar paqueterías de R. Tener instalado R y RStudio en su última versión. Instalación de R y RStudio Para este curso es necesario tener instalada la última versión de R y RStudio. Si no lo tienes, en esta guía te enseñamos cómo hacerlo. Si tienes problemas durante la instalación, escríbenos a cursos@wintergenomics.com "],["lenguajes-y-principios-de-programación.html", "Capítulo 1 Lenguajes y principios de programación", " Capítulo 1 Lenguajes y principios de programación Un lenguaje es un vocabulario y un conjunto de reglas gramaticales para instruir a una computadora o dispositivo informático para realizar tareas específicas. Esto se realiza mediante un script. Un script es una lista de comandos que se ejecutan linea a linea. Son sólo documentos de texto que contienen instrucciones escritas en un determinado lenguaje de secuencias de comandos. Descarga y revisa el material completo del contenido de Lenguajes y principios de programación aquí Si tienes problemas durante la descarga, escríbenos a cursos@wintergenomics.com "],["introducción-a-r-y-rstudio-para-bioinformática.html", "Capítulo 2 Introducción a R y RStudio para bioinformática", " Capítulo 2 Introducción a R y RStudio para bioinformática R es un lenguaje básico de referencia en el mundo de la estadística y una herramienta fundamental para el análisis de datos en el área de las ciencias de la vida. R permite automatizar los cálculos estadísticos y la generación de diversos gráficos para facilitar el análisis de datos. R es uno de los lenguajes más utilizados por científicos en numerosas disciplinas y está diseñado para manipular y analizar grandes cantidades de datos. Descarga y revisa el material completo del contenido aquí. Si tienes problemas durante la descarga, escríbenos a cursos@wintergenomics.com "],["objetos.html", "Capítulo 3 Objetos 3.1 Creación de objetos 3.2 Tipos de datos en R 3.3 Tipos de objetos en R 3.4 Atributos de los objetos 3.5 Operadores", " Capítulo 3 Objetos Todos los elementos que maneja R se llaman objetos En términos prácticos: Es un nombre que almacena cualquier tipo y cantidad de datos (inputs o outputs) con atributos específicos. 3.1 Creación de objetos En R podemos asignar valores a objetos con el siguiente símbolo para la asignación &lt;- Ejemplo: x &lt;- 1 Donde x es la variable y 1 es el objeto ¿Cuál sería otra forma de mostrar el valor de x usando una función? Es importante mantener la estructura de la función u operación, y en ocasiones no importa agregar más espacios, por ejemplo: y &lt;- 1 + 2 y ## [1] 3 Al incluir más espacios, sigue produciendo el mismo resultado y &lt;- 1 + 3 y ## [1] 4 3.1.1 Ejercicio Asigna el resultado de multiplicar 2 por 8 a la variable cromosomas cromosomas &lt;- 2*8 cromosomas ## [1] 16 Ahora asigna el valor 3400 a la variable cromosomas. Para R, no es lo mismo: Juan y “Juan”. Juan (sin comillas) es el nombre de un objeto 3.2 Tipos de datos en R Tipos Dato Ejemplo Caracter Id de paciente “Alejandra”, “IMSS_311” Numérico Cigarrillos por día 9, 4.15, 1000 Lógico ¿Fumador? TRUE (T), FALSE (F) NUMÉRICO Agrega un valor numérico a la variable mi_numero mi_numero &lt;- 30 CARACTER Agrega la siguiente palabra a mi_caracter: Mexico mi_caracter &lt;- &quot;Mexico&quot; NOTA: Cuando usamos texto debemos escribirlo entre ” ” (comillas) LÓGICO Agrega el valor lógico mi_logico &lt;- TRUE Podemos conocer la clase a la que corresponde cada uno de nuestros datos con la función class() class(mi_numero) ## [1] &quot;numeric&quot; class(mi_caracter) ## [1] &quot;character&quot; class(mi_logico) ## [1] &quot;logical&quot; Es posible convertir la clase de un objeto usando las siguientes funciones: as.numeric() as.logical() as.character() as.integer() Ejemplo Convierte mi_numero a caracter usando la función as.character() mi_numero ## [1] 30 class(mi_numero) ## [1] &quot;numeric&quot; as.character(mi_numero) ## [1] &quot;30&quot; 3.3 Tipos de objetos en R Vectores: Son secuencias uni-dimensionales de elementos. Matrices: Son objetos de bi-dimensionales. El contenido de este objeto debe de ser de un solo tipo de datos. Factores: Son vectores de tipo categóricos, pueden contener datos numéricos, integrales o caracteres. Listas: Las listas son parecidas a los vectores, pero a diferencia de estas, no tienen que contener el mismo tipo de datos. Data frames: Es una matriz pero puede contener datos de diferentes tipos, ya sea numéricos o tipo carácter. Tipos Ejemplo Descripción Vector c(“Mary”,”Juan”, … ) Colección de datos en serie Matriz matrix(37, 20, 25, 17, … ) Vector ordenado por filas y columnas Data.frame data.frame(ID_Pacientes, cigarrillos por día, Fumador) Colección de vectores ordenados por columnas; todos los vectores deben ser de la misma longitud Listas list(mi_vector, mi_matriz, mi_dataframe, mi gráfico) Son contenedores generales de datos. Muy flexibles, pero sin estructura 3.4 Atributos de los objetos Los atributos de los objetos pueden ser: Nombres Dimensiones Clases Longitud Otros atributos definidos por el usuario Se pueden acceder a estos atributos usando la función attributes() 3.5 Operadores 3.5.1 Operadores artiméticos Aritmético Descripción + Adición - Substracción * Multiplicación / División ^ Exponente %% Residuo de división %/% División entera 3.5.2 Operadores Relacionales Relacionales Descripción &lt; Menor que &gt; Mayor que &lt;= Menor o igual que &gt;= Mayor o igual que == Igual que != No igual que 3.5.3 Operadores Lógicos Lógico Descripción ! No lógico &amp; Y lógico por elemento &amp;&amp; Y lógico | O lógico por elemento || O lógico "],["vectores.html", "Capítulo 4 Vectores 4.1 Tipo de datos de los vectores 4.2 Construcción de vectores secuenciales 4.3 Manejo de vectores 4.4 Operaciones con vectores 4.5 Combinación de vectores 4.6 Funciones en vectores", " Capítulo 4 Vectores Los vectores son cadenas unidimensionales (es decir una sola columna o fila) de un mismo tipo de valores (numéricos, caracteres, etc.) Para crear un vector se usa la función combinar c(). Creación de un vector numérico longitud &lt;- c(12,11,15,13,16,12,11) Creación de un vector de caracter. Los vectores de caracter se ocupan para guardar texto, por lo que deben de ir entre comillas. colores &lt;- c(&quot;Negro&quot;, &quot;Rosa&quot;, &quot;Amarillo&quot;, &quot;Blanco&quot;, &quot;Azul&quot;, &quot;Marron&quot;, &quot;Guinda&quot;) Creación de vector lógico (Verdadero o Falso) logico &lt;-c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE) El objeto más simple que se puede almacenar en R es un vector con 1 elemento. simple &lt;- &quot;Dora&quot; 4.1 Tipo de datos de los vectores Revisar el tipo de datos que contienen los vectores usamos class(). class(longitud) ## [1] &quot;numeric&quot; class(colores) ## [1] &quot;character&quot; class(logico) ## [1] &quot;logical&quot; 4.2 Construcción de vectores secuenciales Para construir un vector numérico secuencial, podemos usar seq. Vamos a construir un vector del 1 al 6. myseq&lt;-seq(1,6) myseq ## [1] 1 2 3 4 5 6 Creando la secuencia utilizando decimales myseq2&lt;-seq(1,6,by=0.5) myseq2 ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 4.3 Manejo de vectores Creamos el vector PesosPacientes utilizando datos de pesos de diferentes pacientes: PesosPacientes &lt;- c(55, 45, 85, 55, 63, 78, 57) PesosPacientes ## [1] 55 45 85 55 63 78 57 Para acceder a elementos específicos de cada vector usamos los corchetes indicando el elemento al que queremos acceder. En este ejemplo accederemos al peso del paciente 5: PesosPacientes[5] ## [1] 63 Para acceder al peso de los pacientes del 3 al 5 usamos PesosPacientes[3:5] ## [1] 85 55 63 Otra opción para extraer de nuestro objeto más de un elemento es con la función de combinar o concatenar c(). En este ejemplo vamos a usar los pesos de los pacientes 3 y 6: PesosPacientes[c(3,6)] ## [1] 85 78 También podemos usar índices negativos para quitar temporalmente ciertos elementos de un vector. En este ejemplo vamos a quitar los pesos de los pacientes 3 y 6: PesosPacientes[-c(3,6)] ## [1] 55 45 55 63 57 La longitud del vector se obtiene con la función length(). length(PesosPacientes) ## [1] 7 4.4 Operaciones con vectores Para hacer una operación utilizando varios números a la vez usamos la función combinar c(). Empezamos generando los vectores “a” y “b”. a &lt;- c(5,10,12,3) b &lt;- c(18,1,4,7) suma_vect &lt;- a + b # suma de los dos vectores suma_vect ## [1] 23 11 16 10 resta_vect &lt;- a - b # resta de los dos vectores resta_vect ## [1] -13 9 8 -4 4.5 Combinación de vectores Generamos los vectores “pares” y “impares”. pares&lt;- c(1,3,5) #vector con datos impares pares ## [1] 1 3 5 impares&lt;- c(2,4,6) #vector con catos pares impares ## [1] 2 4 6 Con c()combinamos ambos vectores y lo guardamos en el nuevo vector “z”. z&lt;- c(pares,impares) Revisamos la clase del vector. class(z) ## [1] &quot;numeric&quot; 4.6 Funciones en vectores PesosPacientes &lt;- c(55, 45, 85, 55, 63, 78, 57) PesosPacientes ## [1] 55 45 85 55 63 78 57 Para ver los valores, tecleamos PesosPacientes en la consola. El + 1 sumará uno al peso de cada paciente. PesosPacientes + 1 ## [1] 56 46 86 56 64 79 58 Se pueden usar diferentes funciones para aplicarse a los vectores numéricos. La función sum()permite realizar la sumas de los datos. sum(PesosPacientes) ## [1] 438 La función mean() calcula el promedio. mean(PesosPacientes) ## [1] 62.57143 La función max() indica el valor más alto de nuestros datos. max(PesosPacientes) ## [1] 85 La función min() indica el valor más bajo de nuestros datos. min(PesosPacientes) ## [1] 45 La función sort() permite ordenar los valores. sort(PesosPacientes) #ordena de menor a mayor ## [1] 45 55 55 57 63 78 85 sort(PesosPacientes, decreasing = T) #ordena de mayor a menor ## [1] 85 78 63 57 55 55 45 La función unique() muestra los datos o valores únicos o que no se repiten de nuestro set. unique(PesosPacientes) ## [1] 55 45 85 63 78 57 En R también podemos tener valores de texto que siempre van entre comillas. Así como guardamos una serie de números en el objeto “PesosPacientes”, podemos guardar valores de texto en un nuevo objeto de la siguiente manera: nombres &lt;- c(&quot;Susana&quot;, &quot;Angela&quot;, &quot;Oscar&quot;, &quot;Joel&quot;, &quot;Blanca&quot;, &quot;Karla&quot;, &quot;Manuel&quot;) nombres ## [1] &quot;Susana&quot; &quot;Angela&quot; &quot;Oscar&quot; &quot;Joel&quot; &quot;Blanca&quot; &quot;Karla&quot; &quot;Manuel&quot; Revisamos el tipo de vector de nombres. class(nombres) ## [1] &quot;character&quot; El objeto “nombres” nos puede servir para etiquetar los valores numéricos de los pesos de los pacientes, esto con la función names() para asignar nombres de texto. names(PesosPacientes) &lt;- nombres PesosPacientes ## Susana Angela Oscar Joel Blanca Karla Manuel ## 55 45 85 55 63 78 57 "],["matrices.html", "Capítulo 5 Matrices 5.1 Estructura de una matriz 5.2 Creación de una matriz 5.3 Acceder a los elementos de una matriz 5.4 Modificar elementos de una matriz 5.5 Ejercicio", " Capítulo 5 Matrices Una matriz es una estructura de datos, ordenados por filas y columnas (matriz de dos dimensiones). Está constituida por elementos del mismo tipo de datos (numéricos, caracteres, o lógicos), organizados por filas y columnas. Para crear una matriz usamos la función matrix(). 5.1 Estructura de una matriz matrix(nrow=2, ncol=3) ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA Donde: - nrow es el número de filas - ncol es el número de columnas - NA significa Not Available matrix(1:9, byrow = TRUE, nrow = 3) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 El argumento 1:9es una colección de elementos: 1:9 c(1,2,4,5,6,7,8,9) byrow indica que la matriz será rellenada por fila. Si queremos que la matriz sea llenada por columna ajustamos a byrow = FALSE nrow indica que la matriz tendrá 3 filas 5.2 Creación de una matriz MatrixEjemplo &lt;- matrix(1:12, nrow = 4, byrow=TRUE) MatrixEjemplo ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 dim(MatrixEjemplo) ## [1] 4 3 byrow=TRUE llena los elementos por fila. Con el comando dim()se obtiene las dimensiones de la matriz 5.3 Acceder a los elementos de una matriz Para acceder al elemento que se encuentra en la fila 3 y la columna 2 de nuestra MatrixEjemplo, indicamos entre corchetes la fila y la columna a la que queremos acceder. Es muy importante indicar primero la fila y después la columna. MatrixEjemplo[3,2] ## [1] 8 Ahora guardemos el resultado en la variable elemento: elemento&lt;- MatrixEjemplo[3,2] elemento ## [1] 8 Si queremos acceder únicamente a los datos de la fila 3 de nuestra matriz usamos: MatrixEjemplo[3,] ## [1] 7 8 9 La coma después del número 3 indica que queremos ver todos los valores de las columnas que pertenezcan a la fila 3. Si por el contrario, queremos acceder a los valores de la columna dos, usamos: MatrixEjemplo[,2] ## [1] 2 5 8 11 En este caso, la coma está situada antes del número 2 indicando que queremos ver todos los valores de las filas que pertenezcan a la columna 2. Guardemos los resultados en diferentes variables: fila&lt;- MatrixEjemplo[3,] fila ## [1] 7 8 9 columna&lt;- MatrixEjemplo[,2] columna ## [1] 2 5 8 11 5.4 Modificar elementos de una matriz Para modificar cualquier elemento de una matriz debemos de indicar entre corchetes el número de fila y de columna en donde se encuentra el elemento que queremos modificar: [fila, columna]. Vamos a modificar el elemento que se encuentra en la fila 2 de la columna 2. ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 El elemento que queremos cambiar tiene el valor de “5”. Vamos a sustiurlo por el valor de 10. Para esto lo reasignamos a nuestra matriz: MatrixEjemplo[2,2]&lt;- 10 MatrixEjemplo ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 10 6 ## [3,] 7 8 9 ## [4,] 10 11 12 MatrixEjemplo[2,2] indica que queremos acceder al elemento que se encuentra en la fila 2 de la columna 2. &lt;- 10 estamos asignando el valor 10 a la matriz. 5.5 Ejercicio Construir una matriz con los años de secuenciación de organismos de referencia (G). El primer y el segundo elemento es el año de publicación de al menos dos organismos. Gbacterias &lt;- c(1997, 1993) Ghongos &lt;- c(1999, 2000) Ganimales &lt;- c(2000, 2001) cronologia &lt;- c(Gbacterias, Ghongos, Ganimales) Construir matriz de 3 filas, 2 columnas con los valores de cronologia matrix(cronologia, nrow = 3) ## [,1] [,2] ## [1,] 1997 2000 ## [2,] 1993 2000 ## [3,] 1999 2001 Para agregar columnas o filas a matrices utilizamos cbind() y rbind() respectivamente. NOTA: El número de elementos en las columnas o filas debe ser el mismo. cbind(Ganimales,Gbacterias,Ghongos) ## Ganimales Gbacterias Ghongos ## [1,] 2000 1997 1999 ## [2,] 2001 1993 2000 rbind(Ganimales,Gbacterias,Ghongos) ## [,1] [,2] ## Ganimales 2000 2001 ## Gbacterias 1997 1993 ## Ghongos 1999 2000 NOTA: Estos resultados los podemos guardar en distintas variables. "],["data.html", "Capítulo 6 Data.frames 6.1 Características de los data.frames 6.2 Creación de un data.frame 6.3 Extracción de datos de un data.frame 6.4 Combinar data.frames 6.5 Subset de datos 6.6 Ejercicio", " Capítulo 6 Data.frames Es una estructura de tipo tabular, que permite el uso de diferentes tipos de datos. Combina listas de vectores de la misma longitud. Para crear un data.frame usamos la función data.frame. Ejemplo, en una encuesta se tienen preguntas como las siguientes con sus respectivas respuestas: ¿Está vacunado para Influenza? : sí/no (lógicos) ¿Año de nacimiento? : 1990, 1981, 2000, 1952 (numérico) ¿Nacionalidad?: Chi, Rus, Mex, USA (caracteres) 6.1 Características de los data.frames Los nombres de columna no deben estar vacíos Los nombres de las filas deben ser únicos Los datos almacenados en un dataframe pueden ser de tipo numérico, factor o carácter. Cada columna debe contener el mismo número de elementos de datos 6.2 Creación de un data.frame Crear data.frame “TipoDatos” a partir de los siguientes vectores: origen &lt;- c(&quot;Chi&quot;, &quot;Rus&quot;, &quot;Mex&quot;, &quot;USA&quot;) vacunado &lt;- c(FALSE, TRUE, TRUE, TRUE) fecha &lt;- c(&quot;1990&quot;, &quot;1981&quot;, &quot;2000&quot;, &quot;1952&quot;) TipoDatos &lt;- data.frame(origen, vacunado, fecha) TipoDatos ## origen vacunado fecha ## 1 Chi FALSE 1990 ## 2 Rus TRUE 1981 ## 3 Mex TRUE 2000 ## 4 USA TRUE 1952 str() Brinda información sobre la estructura del data.frame. str(TipoDatos) ## &#39;data.frame&#39;: 4 obs. of 3 variables: ## $ origen : chr &quot;Chi&quot; &quot;Rus&quot; &quot;Mex&quot; &quot;USA&quot; ## $ vacunado: logi FALSE TRUE TRUE TRUE ## $ fecha : chr &quot;1990&quot; &quot;1981&quot; &quot;2000&quot; &quot;1952&quot; Para acceder a una columna de un data.frame, utilizamos el símbolo de pesos: TipoDatos$fecha ## [1] &quot;1990&quot; &quot;1981&quot; &quot;2000&quot; &quot;1952&quot; Otra forma de acceder a los elementos de un data.frames es mediante corchetes. Recordemos que esta nomenclatura la estudiamos en el capítulo anterior de Matrices. TipoDatos[,3] ## [1] &quot;1990&quot; &quot;1981&quot; &quot;2000&quot; &quot;1952&quot; De manera similar, para acceder a una fila de un data.frame utilizamos los corchetes, donde [fila, columna]. TipoDatos[2,] ## origen vacunado fecha ## 2 Rus TRUE 1981 6.3 Extracción de datos de un data.frame 6.3.1 Extracción de datos por columna Crear un nuevo data.frame llamado “result” que contenga todos los datos de las columnas origen y fecha. result &lt;- data.frame(TipoDatos$origen,TipoDatos$fecha) result ## TipoDatos.origen TipoDatos.fecha ## 1 Chi 1990 ## 2 Rus 1981 ## 3 Mex 2000 ## 4 USA 1952 6.3.2 Extracción de datos por filas Extraer todos los datos de las filas 1 y 2. subsets &lt;- TipoDatos[1:2,] subsets ## origen vacunado fecha ## 1 Chi FALSE 1990 ## 2 Rus TRUE 1981 6.4 Combinar data.frames Creamos un segundo data.frame llamado “TipoDatos2”. cobertura &lt;- c(&quot;NA&quot;, &quot;Pandemica&quot;, &quot;Estacional&quot;, &quot;NA&quot;) edad &lt;- factor(c(&quot;60&quot;, &quot;50&quot;, &quot;80&quot;, &quot;20&quot;), ordered = TRUE) TipoDatos2 &lt;- data.frame(cobertura, edad) TipoDatos2 ## cobertura edad ## 1 NA 60 ## 2 Pandemica 50 ## 3 Estacional 80 ## 4 NA 20 Con cbind() unimos dos data.frames del mismo tamaño mediante columnas. En este caso uniremos los data.frames TipoDatos y TipoDatos2. datosfinales &lt;- cbind(TipoDatos,TipoDatos2) datosfinales ## origen vacunado fecha cobertura edad ## 1 Chi FALSE 1990 NA 60 ## 2 Rus TRUE 1981 Pandemica 50 ## 3 Mex TRUE 2000 Estacional 80 ## 4 USA TRUE 1952 NA 20 6.5 Subset de datos subset() permite filtrar o extraer los datos que cumplen con un parámetro particular. Si queremos obtener los datos de los pacientes menores a 60 años usamos: subset(datosfinales, subset=edad &lt;60) ## origen vacunado fecha cobertura edad ## 2 Rus TRUE 1981 Pandemica 50 ## 4 USA TRUE 1952 NA 20 Si queremos obtener los datos de los pacientes vacunados usamos: subset(datosfinales, subset=vacunado) ## origen vacunado fecha cobertura edad ## 2 Rus TRUE 1981 Pandemica 50 ## 3 Mex TRUE 2000 Estacional 80 ## 4 USA TRUE 1952 NA 20 Estos resultados los podemos guardar en distantas variables pacientes_edad&lt;- subset(datosfinales, subset=edad &lt;60) pacientes_edad ## origen vacunado fecha cobertura edad ## 2 Rus TRUE 1981 Pandemica 50 ## 4 USA TRUE 1952 NA 20 pacientes_vacunados&lt;- subset(datosfinales, subset=vacunado) pacientes_vacunados ## origen vacunado fecha cobertura edad ## 2 Rus TRUE 1981 Pandemica 50 ## 3 Mex TRUE 2000 Estacional 80 ## 4 USA TRUE 1952 NA 20 6.6 Ejercicio Creamos vectores con los valores para el nuevo data.frame nombre &lt;- c(&quot;Juan&quot;, &quot;Margarita&quot;, &quot;Ruben&quot;, &quot;Daniel&quot;) apellido &lt;- c(&quot;Sanchez&quot;, &quot;Garcia&quot;, &quot;Sancho&quot;, &quot;Alfara&quot;) edad &lt;- c(32, 25, 49, 52) sexo &lt;- c(&quot;HOMBRE&quot;, &quot;MUJER&quot;, &quot;HOMBRE&quot;, &quot;HOMBRE&quot;) hijos &lt;- c(1, 0, 3, 4) Creamos un data.frame con la ayuda de data.frame() censo &lt;- data.frame(nombre, apellido, edad, sexo, hijos) censo ## nombre apellido edad sexo hijos ## 1 Juan Sanchez 32 HOMBRE 1 ## 2 Margarita Garcia 25 MUJER 0 ## 3 Ruben Sancho 49 HOMBRE 3 ## 4 Daniel Alfara 52 HOMBRE 4 Para ver el encabezado del data.frame, usamos head() head(censo) ## nombre apellido edad sexo hijos ## 1 Juan Sanchez 32 HOMBRE 1 ## 2 Margarita Garcia 25 MUJER 0 ## 3 Ruben Sancho 49 HOMBRE 3 ## 4 Daniel Alfara 52 HOMBRE 4 Revisamos la estrucutra del data.frame str(censo) ## &#39;data.frame&#39;: 4 obs. of 5 variables: ## $ nombre : chr &quot;Juan&quot; &quot;Margarita&quot; &quot;Ruben&quot; &quot;Daniel&quot; ## $ apellido: chr &quot;Sanchez&quot; &quot;Garcia&quot; &quot;Sancho&quot; &quot;Alfara&quot; ## $ edad : num 32 25 49 52 ## $ sexo : chr &quot;HOMBRE&quot; &quot;MUJER&quot; &quot;HOMBRE&quot; &quot;HOMBRE&quot; ## $ hijos : num 1 0 3 4 is.data.frame(censo) ## [1] TRUE Conocer el número de filas y columnas con dim() dim(censo) ## [1] 4 5 Usamos nrow() para obtener el número de filas nrow(censo) ## [1] 4 Usamos ncol() para obtener el número de columnas ncol(censo) ## [1] 5 Conocer los nombres de las variables (del encabezado) names(censo) ## [1] &quot;nombre&quot; &quot;apellido&quot; &quot;edad&quot; &quot;sexo&quot; &quot;hijos&quot; Cambiar el nombre de las columnas en la tabla usando names(). names(censo) &lt;- c(&quot;Nombre&quot;, &quot;Apellido&quot;, &quot;Edad&quot;, &quot;Sexo&quot;, &quot;Hijos&quot;) names(censo) ## [1] &quot;Nombre&quot; &quot;Apellido&quot; &quot;Edad&quot; &quot;Sexo&quot; &quot;Hijos&quot; Para asignar diferentes nombres a las columnas y filas de censo también podemos usar colnames y rownames. colnames(censo) &lt;- c(&quot;Nombre&quot;, &quot;Apellido&quot;, &quot;Edad&quot;, &quot;Sexo&quot;, &quot;Número_Hijos&quot;) rownames(censo) &lt;- c(&quot;ID1&quot;, &quot;ID2&quot;, &quot;ID3&quot;, &quot;ID4&quot;) censo ## Nombre Apellido Edad Sexo Número_Hijos ## ID1 Juan Sanchez 32 HOMBRE 1 ## ID2 Margarita Garcia 25 MUJER 0 ## ID3 Ruben Sancho 49 HOMBRE 3 ## ID4 Daniel Alfara 52 HOMBRE 4 6.6.1 Selección de Elementos El acceso a los elementos que se encuentran en un data.frame es muy similar al de los datos de una matriz. Acceder a los datos de las filas 2 a la 4: censo[2:4, ] ## Nombre Apellido Edad Sexo Número_Hijos ## ID2 Margarita Garcia 25 MUJER 0 ## ID3 Ruben Sancho 49 HOMBRE 3 ## ID4 Daniel Alfara 52 HOMBRE 4 Acceder a los datos de la columna 3. censo[, 3] ## [1] 32 25 49 52 También podemos referirnos a la columna por su nombre: censo$Nombre ## [1] &quot;Juan&quot; &quot;Margarita&quot; &quot;Ruben&quot; &quot;Daniel&quot; "],["importación-y-exportación-de-datos.html", "Capítulo 7 Importación y exportación de datos 7.1 Tipos de datos que puedo importar y exportar 7.2 ¿De dónde puedo obtener los datos? 7.3 ¿Cuáles son las diferencias entre R base y las paqueterías ampliadas? 7.4 Estableciendo nuestro directorio de trabajo 7.5 Importación de datos 7.6 Archivos xlsx o de Excel 7.7 Ejercicio", " Capítulo 7 Importación y exportación de datos R puede importar datos de una amplia variedad de tipos de archivo con las funciones en base además de que esta capacidad es ampliada con el uso de paqueterías específicas. 7.1 Tipos de datos que puedo importar y exportar Existen diversos tipos de datos que se pueden importar y exportar en R. Las tres fuentes más comunes para la importación o exportación de datos son: Datos en formato texto (o tabulares) - CSV: .csv (comma separated values o datos separados por comas) - TXT - Otros datos en formato texto Formatos de otros programas (software propietario) - EXCEL: .xls y .xlsx - SPSS: .sav y .por - STATA: .dta - SAS: .sas Formatos propios de R - R objects: .RData o .rda - Serialized R objects: .rds 7.2 ¿De dónde puedo obtener los datos? Datos propios: son datos obtenidos mediante trabajo experimental por parte de mi grupo de trabajo o míos. Datos de sets de datos precargados en R Datos obtenidos de bases de datos en internet Las paqueterías más utilizadas para la importación y exportación de datps son: - r-base - readr - haven 7.3 ¿Cuáles son las diferencias entre R base y las paqueterías ampliadas? R tiene más de 20 años. Las funciones de R-base se construyeron pensando en los estadísticos de hace 20 años (hoy se llamarían analistas de datos). Modificar las funciones de R-base haría que el código antiguo dejase de funcionar, así que la mayoría de avances y mejoras se producen en las paqueterías. Las funciones de readr emulan las funciones equivalentes de R-base mejorándolas y haciéndolas más consistentes; por ejemplo para leer datos CSV la función de R-base es read.csv(); mientras que la función equivalente de “readr” es read_csv(). Las dos hacen lo mismo, leer datos en formato CSV, pero las nuevas funciones tienen algunas ventajas: - Son más rápidas - Encajan más en el workflow/paradigma de la investigación reproducible. Algunas de las funciones de R-base heredan algunas opciones del sistema operativo y las variables de entorno, haciendo posible que un script que funciona en un ordenador no funcione en otro. 7.4 Estableciendo nuestro directorio de trabajo Establecer nuestro directorio de trabajo nos permite tener una mejor organización mientras trabajamos en R. Para conocer nuestro directorio de trabajo actual, usamos getwd() getwd() Asigna a un objeto la ruta de la carpeta de trabajo. Recuerda cambiar /docs/mydir por los nombres de tus carpetas de trabajo directory &lt;- &quot;C:/docs/mydir&quot; #Windows directory &lt;- &quot;/home/users/mydir&quot; #Mac OS o linux setwd() permite ajustar el directorio de trabajo. Vamos a ajustarlo a la ruta de trabajo que guardamos en directory setwd(directory) library(readr) Conocer más sobre las paqueterías help(package=readr) #Read Rectangular Text Data help(package= haven) #Importa y Exporta &#39;SPSS&#39;, &#39;Stata&#39; y archivos &#39;SAS&#39; Visualiza la documentación de la función read_csv de la paquetería readr. help(read_csv, package = &quot;readr&quot;) A veces es conveniente saber que package contiene una función. Podemos hacerlo con la función find para encontrar en qué paquetería está la función help. find(&quot;read_csv&quot;) ## [1] &quot;package:readr&quot; find(&quot;read.csv&quot;) ## [1] &quot;package:utils&quot; 7.5 Importación de datos 7.5.1 Importar datos de los datasets de R R contiene datasets que pueden ser utilizados directamente. Para dar un vistazo a los paquetes disponibles en R usamos data() Guardamos el listado de datasets en un data.frame llamado sets sets &lt;- as.data.frame(data()[[3]]) sets ## Package LibPath ## 1 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 2 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 3 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 4 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 5 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 6 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 7 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 8 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 9 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 10 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 11 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 12 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 13 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 14 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 15 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 16 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 17 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 18 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 19 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 20 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 21 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 22 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 23 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 24 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 25 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 26 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 27 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 28 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 29 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 30 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 31 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 32 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 33 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 34 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 35 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 36 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 37 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 38 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 39 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 40 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 41 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 42 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 43 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 44 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 45 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 46 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 47 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 48 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 49 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 50 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 51 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 52 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 53 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 54 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 55 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 56 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 57 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 58 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 59 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 60 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 61 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 62 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 63 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 64 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 65 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 66 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 67 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 68 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 69 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 70 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 71 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 72 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 73 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 74 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 75 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 76 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 77 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 78 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 79 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 80 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 81 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 82 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 83 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 84 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 85 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 86 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 87 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 88 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 89 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 90 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 91 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 92 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 93 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 94 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 95 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 96 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 97 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 98 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 99 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 100 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 101 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 102 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 103 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## 104 datasets /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## Item ## 1 AirPassengers ## 2 BJsales ## 3 BJsales.lead (BJsales) ## 4 BOD ## 5 CO2 ## 6 ChickWeight ## 7 DNase ## 8 EuStockMarkets ## 9 Formaldehyde ## 10 HairEyeColor ## 11 Harman23.cor ## 12 Harman74.cor ## 13 Indometh ## 14 InsectSprays ## 15 JohnsonJohnson ## 16 LakeHuron ## 17 LifeCycleSavings ## 18 Loblolly ## 19 Nile ## 20 Orange ## 21 OrchardSprays ## 22 PlantGrowth ## 23 Puromycin ## 24 Seatbelts ## 25 Theoph ## 26 Titanic ## 27 ToothGrowth ## 28 UCBAdmissions ## 29 UKDriverDeaths ## 30 UKgas ## 31 USAccDeaths ## 32 USArrests ## 33 USJudgeRatings ## 34 USPersonalExpenditure ## 35 UScitiesD ## 36 VADeaths ## 37 WWWusage ## 38 WorldPhones ## 39 ability.cov ## 40 airmiles ## 41 airquality ## 42 anscombe ## 43 attenu ## 44 attitude ## 45 austres ## 46 beaver1 (beavers) ## 47 beaver2 (beavers) ## 48 cars ## 49 chickwts ## 50 co2 ## 51 crimtab ## 52 discoveries ## 53 esoph ## 54 euro ## 55 euro.cross (euro) ## 56 eurodist ## 57 faithful ## 58 fdeaths (UKLungDeaths) ## 59 freeny ## 60 freeny.x (freeny) ## 61 freeny.y (freeny) ## 62 infert ## 63 iris ## 64 iris3 ## 65 islands ## 66 ldeaths (UKLungDeaths) ## 67 lh ## 68 longley ## 69 lynx ## 70 mdeaths (UKLungDeaths) ## 71 morley ## 72 mtcars ## 73 nhtemp ## 74 nottem ## 75 npk ## 76 occupationalStatus ## 77 precip ## 78 presidents ## 79 pressure ## 80 quakes ## 81 randu ## 82 rivers ## 83 rock ## 84 sleep ## 85 stack.loss (stackloss) ## 86 stack.x (stackloss) ## 87 stackloss ## 88 state.abb (state) ## 89 state.area (state) ## 90 state.center (state) ## 91 state.division (state) ## 92 state.name (state) ## 93 state.region (state) ## 94 state.x77 (state) ## 95 sunspot.month ## 96 sunspot.year ## 97 sunspots ## 98 swiss ## 99 treering ## 100 trees ## 101 uspop ## 102 volcano ## 103 warpbreaks ## 104 women ## Title ## 1 Monthly Airline Passenger Numbers 1949-1960 ## 2 Sales Data with Leading Indicator ## 3 Sales Data with Leading Indicator ## 4 Biochemical Oxygen Demand ## 5 Carbon Dioxide Uptake in Grass Plants ## 6 Weight versus age of chicks on different diets ## 7 Elisa assay of DNase ## 8 Daily Closing Prices of Major European Stock Indices, 1991-1998 ## 9 Determination of Formaldehyde ## 10 Hair and Eye Color of Statistics Students ## 11 Harman Example 2.3 ## 12 Harman Example 7.4 ## 13 Pharmacokinetics of Indomethacin ## 14 Effectiveness of Insect Sprays ## 15 Quarterly Earnings per Johnson &amp; Johnson Share ## 16 Level of Lake Huron 1875-1972 ## 17 Intercountry Life-Cycle Savings Data ## 18 Growth of Loblolly pine trees ## 19 Flow of the River Nile ## 20 Growth of Orange Trees ## 21 Potency of Orchard Sprays ## 22 Results from an Experiment on Plant Growth ## 23 Reaction Velocity of an Enzymatic Reaction ## 24 Road Casualties in Great Britain 1969-84 ## 25 Pharmacokinetics of Theophylline ## 26 Survival of passengers on the Titanic ## 27 The Effect of Vitamin C on Tooth Growth in Guinea Pigs ## 28 Student Admissions at UC Berkeley ## 29 Road Casualties in Great Britain 1969-84 ## 30 UK Quarterly Gas Consumption ## 31 Accidental Deaths in the US 1973-1978 ## 32 Violent Crime Rates by US State ## 33 Lawyers&#39; Ratings of State Judges in the US Superior Court ## 34 Personal Expenditure Data ## 35 Distances Between European Cities and Between US Cities ## 36 Death Rates in Virginia (1940) ## 37 Internet Usage per Minute ## 38 The World&#39;s Telephones ## 39 Ability and Intelligence Tests ## 40 Passenger Miles on Commercial US Airlines, 1937-1960 ## 41 New York Air Quality Measurements ## 42 Anscombe&#39;s Quartet of &#39;Identical&#39; Simple Linear Regressions ## 43 The Joyner-Boore Attenuation Data ## 44 The Chatterjee-Price Attitude Data ## 45 Quarterly Time Series of the Number of Australian Residents ## 46 Body Temperature Series of Two Beavers ## 47 Body Temperature Series of Two Beavers ## 48 Speed and Stopping Distances of Cars ## 49 Chicken Weights by Feed Type ## 50 Mauna Loa Atmospheric CO2 Concentration ## 51 Student&#39;s 3000 Criminals Data ## 52 Yearly Numbers of Important Discoveries ## 53 Smoking, Alcohol and (O)esophageal Cancer ## 54 Conversion Rates of Euro Currencies ## 55 Conversion Rates of Euro Currencies ## 56 Distances Between European Cities and Between US Cities ## 57 Old Faithful Geyser Data ## 58 Monthly Deaths from Lung Diseases in the UK ## 59 Freeny&#39;s Revenue Data ## 60 Freeny&#39;s Revenue Data ## 61 Freeny&#39;s Revenue Data ## 62 Infertility after Spontaneous and Induced Abortion ## 63 Edgar Anderson&#39;s Iris Data ## 64 Edgar Anderson&#39;s Iris Data ## 65 Areas of the World&#39;s Major Landmasses ## 66 Monthly Deaths from Lung Diseases in the UK ## 67 Luteinizing Hormone in Blood Samples ## 68 Longley&#39;s Economic Regression Data ## 69 Annual Canadian Lynx trappings 1821-1934 ## 70 Monthly Deaths from Lung Diseases in the UK ## 71 Michelson Speed of Light Data ## 72 Motor Trend Car Road Tests ## 73 Average Yearly Temperatures in New Haven ## 74 Average Monthly Temperatures at Nottingham, 1920-1939 ## 75 Classical N, P, K Factorial Experiment ## 76 Occupational Status of Fathers and their Sons ## 77 Annual Precipitation in US Cities ## 78 Quarterly Approval Ratings of US Presidents ## 79 Vapor Pressure of Mercury as a Function of Temperature ## 80 Locations of Earthquakes off Fiji ## 81 Random Numbers from Congruential Generator RANDU ## 82 Lengths of Major North American Rivers ## 83 Measurements on Petroleum Rock Samples ## 84 Student&#39;s Sleep Data ## 85 Brownlee&#39;s Stack Loss Plant Data ## 86 Brownlee&#39;s Stack Loss Plant Data ## 87 Brownlee&#39;s Stack Loss Plant Data ## 88 US State Facts and Figures ## 89 US State Facts and Figures ## 90 US State Facts and Figures ## 91 US State Facts and Figures ## 92 US State Facts and Figures ## 93 US State Facts and Figures ## 94 US State Facts and Figures ## 95 Monthly Sunspot Data, from 1749 to &quot;Present&quot; ## 96 Yearly Sunspot Data, 1700-1988 ## 97 Monthly Sunspot Numbers, 1749-1983 ## 98 Swiss Fertility and Socioeconomic Indicators (1888) Data ## 99 Yearly Treering Data, -6000-1979 ## 100 Diameter, Height and Volume for Black Cherry Trees ## 101 Populations Recorded by the US Census ## 102 Topographic Information on Auckland&#39;s Maunga Whau Volcano ## 103 The Number of Breaks in Yarn during Weaving ## 104 Average Heights and Weights for American Women Conocer la información de los paquetes disponibles paquetes &lt;- library(help = &quot;datasets&quot;) head(paquetes$info[[2]]) ## [1] &quot;AirPassengers Monthly Airline Passenger Numbers 1949-1960&quot; ## [2] &quot;BJsales Sales Data with Leading Indicator&quot; ## [3] &quot;BOD Biochemical Oxygen Demand&quot; ## [4] &quot;CO2 Carbon Dioxide Uptake in Grass Plants&quot; ## [5] &quot;ChickWeight Weight versus age of chicks on different diets&quot; ## [6] &quot;DNase Elisa assay of DNase&quot; Cargar sets de datos directamente de estas bases datos_R&lt;- iris datos_R ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica Conocer los nombres de las columnas names(datos_R) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; Visualizar las primeras filas de la tabla head(datos_R) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 7.5.2 Importar datos desde internet Esta base de datos de cáncer de mama se obtuvo de la Universidad de Wisconsin del Dr. William Wolberg. El conjunto de datos provienen de un estudio de cáncer de mama en Wisconsin. Hay 681 casos de tumores potencialmente cancerosos, de los cuales 238 son realmente malignos. Cada característica se evalúa en una escala del 1 al 10, siendo 1 el más cercano a benigno y 10 el más cercano a maligno. Para descargar archivos de internet, usamos la función download.file(). help(&quot;download.file&quot;) La función download.file() pide como argumento la url o la dirección de internet del archivo que queremos descargar y en dest, el nombre que tendrá el archivo en nuestra computadora. download.file( url = &quot;https://raw.githubusercontent.com/jboscomendoza/r-principiantes-bookdown/master/datos/breast-cancer-wis.data&quot;, dest = &quot;breast-cancer-wis.data&quot; ) tabla_cancer&lt;-read_table(&quot;breast-cancer-wis.data&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## `1000025,5,1,1,1,2,1,3,1,1,2` = col_character() ## ) bcancer &lt;- read.table(file = &quot;breast-cancer-wis.data&quot;, header = FALSE, sep = &quot;,&quot;) head(bcancer) ## V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 ## 1 1000025 5 1 1 1 2 1 3 1 1 2 ## 2 1002945 5 4 4 5 7 10 3 2 1 2 ## 3 1015425 3 1 1 1 2 2 3 1 1 2 ## 4 1016277 6 8 8 1 3 4 3 7 1 2 ## 5 1017023 4 1 1 3 2 1 3 1 1 2 ## 6 1017122 8 10 10 8 7 10 9 7 1 4 nombres &lt;- c(&quot;id&quot;, &quot;clump_t&quot;, &quot;u_csize&quot;, &quot;u_cshape&quot;, &quot;m_adh&quot;, &quot;spcs&quot;, &quot;b_nuc&quot;, &quot;b_chr&quot;, &quot;n_nuc&quot;, &quot;mit&quot;, &quot;class&quot;) bcancer &lt;- read.table(file = &quot;breast-cancer-wis.data&quot;, header = FALSE, sep = &quot;,&quot;, col.names = nombres) head(bcancer) ## id clump_t u_csize u_cshape m_adh spcs b_nuc b_chr n_nuc mit class ## 1 1000025 5 1 1 1 2 1 3 1 1 2 ## 2 1002945 5 4 4 5 7 10 3 2 1 2 ## 3 1015425 3 1 1 1 2 2 3 1 1 2 ## 4 1016277 6 8 8 1 3 4 3 7 1 2 ## 5 1017023 4 1 1 3 2 1 3 1 1 2 ## 6 1017122 8 10 10 8 7 10 9 7 1 4 7.5.3 Exportar archivos CSV Vamos a guardar el data.frame bcancer como un archivo csv llamado “bcancer.csv” y bcancer2.csv utilizando el comando write_._csv() y write.csv() respectivamente. Las tablas se guardarán en nuestro directorio de trabajo actual. write_csv(bcancer, file = &quot;bcancer.csv&quot;) write.csv(bcancer, file= &quot;bcancer2.csv&quot;) 7.5.4 Archivos CSV También podemos trabajar con datos de archivos de texto de nuestra computadora. Importa archivos de texto plano con formato CSV (coma-separated values) que descargamos anteriormente. Usamos la función read.csv o read_csv. bcancer_tabla &lt;- read_csv(&quot;bcancer.csv&quot;) ## Rows: 699 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): b_nuc ## dbl (10): id, clump_t, u_csize, u_cshape, m_adh, spcs, b_chr, n_nuc, mit, class ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(bcancer_tabla) ## # A tibble: 6 × 11 ## id clump_t u_csize u_cshape m_adh spcs b_nuc b_chr n_nuc mit class ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1000025 5 1 1 1 2 1 3 1 1 2 ## 2 1002945 5 4 4 5 7 10 3 2 1 2 ## 3 1015425 3 1 1 1 2 2 3 1 1 2 ## 4 1016277 6 8 8 1 3 4 3 7 1 2 ## 5 1017023 4 1 1 3 2 1 3 1 1 2 ## 6 1017122 8 10 10 8 7 10 9 7 1 4 names(bcancer_tabla) ## [1] &quot;id&quot; &quot;clump_t&quot; &quot;u_csize&quot; &quot;u_cshape&quot; &quot;m_adh&quot; &quot;spcs&quot; ## [7] &quot;b_nuc&quot; &quot;b_chr&quot; &quot;n_nuc&quot; &quot;mit&quot; &quot;class&quot; head(bcancer_tabla) ## # A tibble: 6 × 11 ## id clump_t u_csize u_cshape m_adh spcs b_nuc b_chr n_nuc mit class ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1000025 5 1 1 1 2 1 3 1 1 2 ## 2 1002945 5 4 4 5 7 10 3 2 1 2 ## 3 1015425 3 1 1 1 2 2 3 1 1 2 ## 4 1016277 6 8 8 1 3 4 3 7 1 2 ## 5 1017023 4 1 1 3 2 1 3 1 1 2 ## 6 1017122 8 10 10 8 7 10 9 7 1 4 Algunas veces los datos tienen ciertos problemas que hay que arreglar para importar correctamente los datos a R. read_csv() tiene opciones que facilitan la importación de archivos CSV: col_names: read_csv() asume que la primera fila contiene los nombres de las variables. Esto puede cambiarse con col_names = FALSE. También puedes proveer los nombres a las variables (o columnas) con col_names = c(\"X1\", \"X2\") skip:read_csv() por defecto importa todas las filas del archivo, pero puedes hacer que comience a importar en la fila que quieras con skip = n na: En algunos ficheros con datos tabulares, los NAs se especifican con algún carácter. Esto podemos tratarlo al leer los datos con el argumento na = \"xxx\" 7.5.5 Archivos TXT Importa y exporta los archivos de texto plano con formato de tabla (data.frame). Exportemos la tabla anterior como archivo txt usando write.table. write.table(x = bcancer, file = &quot;bcancer.txt&quot;, sep = &quot;,&quot;, row.names = FALSE, col.names = TRUE) Para importar un archivo txt, usamos read.table. El argumento header permite incorporar el encabezado del archivo que queremos importar mientras que el argumento sep. En el siguiente comando, el argumento sep=\",\" le indica a R que nuestros datos están separados por el símbolo “,” o coma. bcancer_txt &lt;- read.table(&quot;bcancer.txt&quot;) head(bcancer_txt) ## id clump_t u_csize u_cshape m_adh spcs b_nuc b_chr n_nuc mit class ## 1 1000025 5 1 1 1 2 1 3 1 1 2 ## 2 1002945 5 4 4 5 7 10 3 2 1 2 ## 3 1015425 3 1 1 1 2 2 3 1 1 2 ## 4 1016277 6 8 8 1 3 4 3 7 1 2 ## 5 1017023 4 1 1 3 2 1 3 1 1 2 ## 6 1017122 8 10 10 8 7 10 9 7 1 4 7.6 Archivos xlsx o de Excel Para importar o exportar archivos de Excel, es necesario utilizar la paquetería \"openxlsx\" que permite trabajar con documentos de Excel en R. La instalación de paqueterías se realiza sólo una vez. Una vez que la librería o paquetería esté instalada, puedes omitir este paso. install.packages(&quot;openxlsx&quot;, dependencies = TRUE) Ahora cargaremos las paqueterías. El llamado de librerías deberá hacerse cada que inicies una nueva sesión en R. library(openxlsx) 7.6.1 Importación de datos xlsx o de Excel Importaremos un nuevo set de datos de Excel que puedes descargar de aquí. Recuerda guardarlos en tu carpeta de trabajo. datosXLSX &lt;- read.xlsx(&quot;iris.xlsx&quot;) head(datosXLSX) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 7.6.2 Exportación de datos en Excel Vamos a exportar el data.frame datosXLSX que creamos anteriormente como un archivo de Excel llamado “datos.xlsx” utilizando el comando write.xlsx(). El archivo se guardará en nuestro directorio de trabajo actual. write.xlsx(tablaDE, &quot;datos.xlsx&quot;) 7.7 Ejercicio Vamos a crear un data.frame para practicar cómo exportar los datos. DosisX &lt;- c(46, 20, 80, 100, 63) DosisY &lt;- c(6, 50, 70, 70, 63) Lcelular &lt;- c(&quot;MCF7&quot;, &quot;Hela&quot;, &quot;IPC-366&quot;, &quot;T47D&quot;, &quot;ZR75-1&quot;) tablaDE &lt;- data.frame(DosisX, DosisY, Lcelular) tablaDE ## DosisX DosisY Lcelular ## 1 46 6 MCF7 ## 2 20 50 Hela ## 3 80 70 IPC-366 ## 4 100 70 T47D ## 5 63 63 ZR75-1 7.7.1 Exportar como TXT Vamos a guardar el data.frame tablaDE como un archivo de texto llamado “datos.txt” utilizando el comando write.table(). La tabla se guardará en nuestro directorio de trabajo actual. write.table(tablaDE, &quot;datos.txt&quot;) 7.7.2 Exportar como CSV Vamos a guardar el data.frame tablaDE como un archivo csv llamado “datos.csv” utilizando el comando write.csv(). La tabla se guardará en nuestro directorio de trabajo actual. write.csv(tablaDE, &quot;datos.csv&quot;) 7.7.3 Argumentos al exportar Así como al importar archivos existen diversos argumentos que podemos utilizar para darles ciertas indicaciones a R, también lo podemos hacer al momento de exportar los datos. Los siguientes argumentos se pueden usar con write.csv() y write.table(). row.names=FALSE nos permite suprimir los nombres de las filas write.csv(tablaDE, &quot;datos1.csv&quot;, row.names=FALSE) Para indicar la separación del archivo utilizamos sep. Vamos a usar la tabulación como separador poniendo sep=\"\\t\". write.csv(tablaDE, &quot;datos2.csv&quot;, row.names=FALSE, sep=&quot;\\t&quot;) Para suprimir los nombres de las columnas, usamos col.names=FALSE write.csv(tablaDE, &quot;datos3.csv&quot;, row.names=FALSE, sep=&quot;\\t&quot;, col.names=FALSE) "],["instalación-de-paqueterías.html", "Capítulo 8 Instalación de paqueterías 8.1 Paqueterías de CRAN 8.2 Paqueterías de Bioconductor 8.3 Paqueterías de GitHub", " Capítulo 8 Instalación de paqueterías Las paqueterías o librerías son herramientas que se utilizan en R y facilitan la manipulación de datos y realizar diferentes tipos de análisis y gráficos. Las paqueterías se pueden descargar desde tres repositorios principales: CRAN Bioconductor GitHub Cada paquetería contiene su manual o documentación para conocer las opciones o argumentos que se pueden usar. También contienen datos de prueba para verificar que todo funcione. La instalación de las paqueterías se realiza una sola vez. 8.1 Paqueterías de CRAN CRAN es el repositorio oficial de R contenido en una red de servidores ftp y web mantenidos por la comunidad R. Para que un paquete se publique en CRAN, debe pasar pruebas que garanticen que el paquete cumple con las políticas de la comunidad. Aquí puedes consultar todas las paqueterías disponibles en CRAN. A continuación instalaremos la paquetería ggplot2, que se encuentra en el repositorio CRAN. 8.1.1 Instalación de paqueteria ggplot2 install.packages(&quot;ggplot2&quot;) El comando packageDescription() muestra una descripción general sobre la paquetería. packageDescription(&quot;ggplot2&quot;) El comando help() muestra la ayuda sobre la paquetería. help(package = &quot;ggplot2&quot;) Si quieres eliminar una paquetería, utiliza el comando remove.packages() indicando entre paréntesis el nombre de la paquetería. 8.2 Paqueterías de Bioconductor Bioconductor es un repositorio de temas específicos para software de código abierto en bioinformática. Para instalar cualquier paquetería de Bioconductor, es necesario instalar BiocManager, que es el gestor de paqueterías de Bioconductor. 8.2.1 Instalación de BiocManager install.packages(&quot;BiocManager&quot;) Una vez instalado BiocManager, ya podemos instalar las paqueterías que se encuentran en Bioconductor. Aquí puedes revisar todas las paqueterías disponibles en Bioconductor. 8.2.2 Instalación de paqueterías de Bioconductor. En este caso instalaremos la paquetería AnnotationDbi BiocManager::install(&quot;AnnotationDbi&quot;) 8.3 Paqueterías de GitHub GitHub no es específico de R pero es el repositorio más popular para proyectos de código abierto. Su popularidad se debe al espacio ilimitado, la integración con git, control de versiones y su facilidad para compartir y colaborar con otros usuarios. La instalación de paqueterías desde GitHub dependerá de instrucciones indicadas por los autores. "],["gráficos-en-r.html", "Capítulo 9 Gráficos en R 9.1 Tipos de gráficos en R 9.2 Paqueterías para graficar en R 9.3 Gráficos de base R 9.4 Paletas de colores en R 9.5 ggplot2", " Capítulo 9 Gráficos en R R es un lenguaje de programación y entorno computacional dedicado a la estadística que dispone de múltiples funciones diseñadas para la representación gráfica de datos. Revisa la presentación completa aquí 9.1 Tipos de gráficos en R Existe una gran variedad de gráficos que pueden utilizarse según el tipo de datos que se tengan. Fuente 9.2 Paqueterías para graficar en R Existen diversas paqueterías en R que facilitan la creación de gráficos. Cada paquetería permite crear diversos tipos de gráficos. graphics grid Lattice ggplot2 gganimate Highcharts bbplot ggfortify 9.3 Gráficos de base R R cuenta con el paquete base de graphics para la construcción de gráficos. La función plot es la función básica que permite crear: Líneas Barras Boxplots Matrices de dispersión 9.4 Paletas de colores en R Los colores son uno de los elementos esenciales de un gráfico. Forman parte de la estética y por tanto, los podemos utilizar tanto para representar variables, como para destacar elementos dentro de la visualización. Aquí y aquí puedes revisar los colores disponibles en R que puedes usar en tus gráficas. 9.5 ggplot2 ggplot2 es una de las paqueterías más populares en R para crear una gran variedad de gráficos. ggplot2 es un sistema para la creación declarativa de gráficos basado en la gramática de gráficos. En esta gramática, se separan los elementos o las partes de un gráfico en diferentes capas o layers, y así es más fácil modificarlos. ggplot2 funciona a través de la grámatica de gráficos donde se dan los datos, las variables que queremos a graficar y la geometría deseada. Instalación de ggplot2 install.packages(&quot;tidyverse&quot;) install.packages(&quot;ggplot2&quot;) Cargar la librería de trabajo library(ggplot2) Importamos el set de datos que puedes descargar de aquí datos &lt;- read.csv(&quot;BRCA_1.csv&quot;) head(datos) ## Patient_ID Age Gender Protein1 Protein2 Protein3 Protein4 Protein5 ## 1 TCGA-D8-A1XD 36 FEMALE 0.080353 0.42638 0.547150 0.273680 -0.8377779 ## 2 TCGA-EW-A1OX 43 FEMALE -0.420320 0.57807 0.614470 -0.031505 3.9312819 ## 3 TCGA-A8-A079 69 FEMALE 0.213980 1.31140 -0.327470 -0.234260 12.0651683 ## 4 TCGA-D8-A1XR 56 FEMALE 0.345090 -0.21147 -0.193040 0.124270 1.3747799 ## 5 TCGA-BH-A0BF 56 FEMALE 0.221550 1.90680 0.520450 -0.311990 3.5984373 ## 6 TCGA-AO-A1KQ 84 MALE -0.081872 1.72410 -0.057335 0.043025 10.4367737 ## Protein6 Protein7 Protein8 Tumour_Stage Histology ## 1 1.121232 1.2252707 1.693330 III Infiltrating Ductal Carcinoma ## 2 4.004814 3.7966065 3.818823 II Mucinous Carcinoma ## 3 8.089310 7.0638903 7.970331 III Infiltrating Ductal Carcinoma ## 4 2.158426 10.8775737 10.461724 II Infiltrating Ductal Carcinoma ## 5 2.138539 0.5366344 1.543580 II Infiltrating Ductal Carcinoma ## 6 9.154762 5.3596392 3.372255 III Infiltrating Ductal Carcinoma ## ER.status PR.status HER2.status Surgery_type Date_of_Surgery ## 1 Positive Positive Negative Modified Radical Mastectomy 15-Jan-17 ## 2 Positive Positive Negative Lumpectomy 26-Apr-17 ## 3 Positive Positive Negative Other 08-sep-17 ## 4 Positive Positive Negative Modified Radical Mastectomy 25-Jan-17 ## 5 Positive Positive Negative Other 06-may-17 ## 6 Positive Positive Negative Modified Radical Mastectomy 18-sep-17 ## Date_of_Last_Visit Patient_Status ## 1 19-jun-17 Alive ## 2 09-nov-18 Dead ## 3 09-jun-18 Alive ## 4 12-jul-17 Alive ## 5 27-jun-19 Dead ## 6 15-nov-21 Alive names(datos) ## [1] &quot;Patient_ID&quot; &quot;Age&quot; &quot;Gender&quot; ## [4] &quot;Protein1&quot; &quot;Protein2&quot; &quot;Protein3&quot; ## [7] &quot;Protein4&quot; &quot;Protein5&quot; &quot;Protein6&quot; ## [10] &quot;Protein7&quot; &quot;Protein8&quot; &quot;Tumour_Stage&quot; ## [13] &quot;Histology&quot; &quot;ER.status&quot; &quot;PR.status&quot; ## [16] &quot;HER2.status&quot; &quot;Surgery_type&quot; &quot;Date_of_Surgery&quot; ## [19] &quot;Date_of_Last_Visit&quot; &quot;Patient_Status&quot; Eliminar datos con NA datos &lt;- na.omit(datos) 9.5.1 Scatterplots Vamos a crear un gráfico del tipo scatterplot muy básico con ggplot2. ggplot(datos, aes(x = Protein7, y = Protein8)) + geom_point() Ahora vamos a colorear todos los puntos utilizando geom_point(color). ggplot(datos, aes(x = Protein7, y = Protein8)) + geom_point(color=&quot;red&quot;, size= 2) Con el argumento color coloreamos por estadío de tumor. ggplot(datos, aes(x = Protein7, y = Protein8, color= Tumour_Stage)) + geom_point()+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;) Para agregar las etiquetas de los ejes usamos labs(), mientras que ggtitle()permite agregar el título al gráfico como se muestra a continuación. ggplot(datos, aes(x = Protein7, y = Protein8, color= Tumour_Stage)) + geom_point()+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;) shape permite modificar la forma del punto. En este caso vamos a poner diferentes puntos según la especie de flor. ggplot(datos, aes(x = Protein7, y = Protein8, color=Tumour_Stage, shape=Tumour_Stage)) + geom_point(size=3) + theme_bw()+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;) Cambiamos la posición de la leyenda en nuestro gráfico ggplot(datos, aes(x = Protein7, y = Protein8, color= Tumour_Stage)) + geom_point()+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;) Otra opción para modificar los colores es utilizando scale_colour_manual(). Con este argumento indicamos los colores que queremos usar para nuestro gráfico basados en la paleta de colores. ggplot(datos, aes(x = Protein7, y = Protein8, color= Tumour_Stage)) + geom_point()+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;)+ scale_colour_manual(values=c(&quot;navy&quot;, &quot;mediumvioletred&quot;, &quot;mediumturquoise&quot;)) 9.5.2 RcolorBrewer RcolorBrewer es una paquetería exclusiva de colores que podemos usar en nuestros gráficos. install.packages(&quot;RColorBrewer&quot;) library(RColorBrewer) Conocer todas las paletas de colores disponibles en RColorBrewer. display.brewer.all() Vamos a elegir la paleta “Dark2” para personalizar nuestro gráfico. Usamos el argumento scale_colour_brewer() como se muestra a continuación ggplot(datos, aes(x = Protein7, y = Protein8, color= Tumour_Stage)) + geom_point()+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;)+ scale_colour_brewer(palette=&quot;Dark2&quot;) 9.5.3 Múltiples gráficos en una sola imagen ggplot(datos, aes(x = Protein7, y = Protein8, color= Tumour_Stage)) + geom_point() + facet_wrap(~Tumour_Stage)+ labs(x = &quot;Proteina 7&quot; ,y = &quot;Proteina 8&quot;, subtitle = &quot;Scatterplot&quot;)+ ggtitle(&quot;Cáncer de mama&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;)+ scale_colour_manual(values=c(&quot;navy&quot;, &quot;mediumvioletred&quot;, &quot;mediumturquoise&quot;)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 9.5.4 Histogramas ggplot(datos, aes(x=Age))+ geom_histogram(bins=30, color=&quot;darkblue&quot;, fill=&quot;lightblue&quot;)+ theme_bw() Colorear histogramas por género ggplot(datos, aes(x=Age, color= Gender))+ geom_histogram(bins=30, fill= &quot;White&quot;)+ theme_gray()+ labs(x = &quot;Edad&quot; ,y = &quot;Frecuencia&quot;, subtitle = &quot;Histograma&quot;)+ ggtitle(&quot;Cáncer de mama&quot;) p&lt;- ggplot(datos, aes(x=Age, fill= Gender))+ geom_histogram(bins=30, color= &quot;Black&quot;, alpha=0.6)+ theme_gray()+ labs(x = &quot;Edad&quot; ,y = &quot;Frecuencia&quot;, subtitle = &quot;Histograma&quot;)+ ggtitle(&quot;Cáncer de mama&quot;) p + scale_fill_brewer(palette=&quot;Accent&quot;) + theme_gray()+ theme(legend.position=&quot;top&quot;) 9.5.5 Boxplots names(datos) ## [1] &quot;Patient_ID&quot; &quot;Age&quot; &quot;Gender&quot; ## [4] &quot;Protein1&quot; &quot;Protein2&quot; &quot;Protein3&quot; ## [7] &quot;Protein4&quot; &quot;Protein5&quot; &quot;Protein6&quot; ## [10] &quot;Protein7&quot; &quot;Protein8&quot; &quot;Tumour_Stage&quot; ## [13] &quot;Histology&quot; &quot;ER.status&quot; &quot;PR.status&quot; ## [16] &quot;HER2.status&quot; &quot;Surgery_type&quot; &quot;Date_of_Surgery&quot; ## [19] &quot;Date_of_Last_Visit&quot; &quot;Patient_Status&quot; Creamos un boxplot básico ggplot(datos, aes(y = Protein7, x= Tumour_Stage)) + geom_boxplot() Personalizamos el boxplot ggplot(datos, aes(y = Protein7, x= Tumour_Stage, fill=Tumour_Stage)) + geom_boxplot()+ ggtitle(&quot;Cancer de mama&quot;)+ theme_light()+ labs(subtitle = &quot;Boxplot&quot;, y= &quot;Proteína 7&quot;, x=&quot;Estadío del tumor&quot;) Colorear manualmente los boxplots ggplot(datos, aes(y = Protein7, x= Tumour_Stage, fill=Tumour_Stage)) + geom_boxplot()+ ggtitle(&quot;Cáncer de mama&quot;)+ theme_light()+ labs(subtitle = &quot;Boxplot&quot;, y= &quot;Proteína 1&quot;, x=&quot;Estadío del tumor&quot;)+ scale_fill_manual(values=c(&quot;navy&quot;, &quot;mediumvioletred&quot;, &quot;mediumturquoise&quot;)) Colorear utilizando paletas de colores ggplot(datos, aes(y = Protein1, x= Tumour_Stage, fill=Tumour_Stage)) + geom_boxplot()+ ggtitle(&quot;Cáncer de mama&quot;)+ labs(subtitle = &quot;Boxplot&quot;, y= &quot;Proteína 1&quot;, x=&quot;Estadío del tumor&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;)+ scale_fill_brewer(palette=&quot;Dark2&quot;) Boxplots agrupados por mutaciones de HER2 y estadío de tumor ggplot(datos, aes(y = Protein7, x= Tumour_Stage, fill=HER2.status)) + geom_boxplot()+ scale_fill_brewer(palette=&quot;Set2&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;)+ ggtitle(&quot;Cáncer de mama&quot;)+ labs(subtitle = &quot;Boxplot&quot;, y= &quot;Proteína 17&quot;, x=&quot;Estadío del tumor&quot;) Multiples boxplots separados por mutaciones de HER2 y estadío de tumor ggplot(datos, aes(y = Protein7, x= Tumour_Stage, fill=HER2.status)) + geom_boxplot() + facet_wrap(~HER2.status)+ scale_fill_brewer(palette = &quot;PiYG&quot;)+ theme_bw()+ theme(legend.position = &quot;bottom&quot;)+ ggtitle(&quot;Cáncer de mama&quot;)+ labs(subtitle = &quot;Boxplot&quot;, y= &quot;Proteína 7&quot;, x=&quot;Estadío del tumor&quot;) "],["heatmaps.html", "Capítulo 10 Heatmaps", " Capítulo 10 Heatmaps Los heatmaps son una técnica de visualización de datos que mide la magnitud de un fenómeno en colores en dos dimensiones. La variación del color puede ser por tono o intensidad, haciendo obvia la lectura del fenómeno sobre el espacio que se trata. Son el resultado obtenido al representar una matriz de valores en la que, en lugar de números, se muestra un gradiente de color proporcional al valor de cada variable en cada posición. Los heatmaps son ampliamente utilizados para visualizar e interpretar datos de expresión génica, principalmente para experimentos con microarrays y RNA-seq. También se puede combinar con métodos de agrupación, que agrupan genes y/o muestras en función de la similitud de su patrón de expresión génica. Esto puede ser útil para identificar genes que están comúnmente regulados o firmas biológicas asociadas con una condición particular (por ejemplo, una enfermedad o una condición ambiental). Para crear los heatmps usaremos pheatmap(). Instalamos la paquetería y después la cargamos. install.packages(&quot;pheatmap&quot;) library(pheatmap) El set de datos que vamos a usar los puedes descargar de aquí. Recuerda guardarlos en tu carpeta de trabajo actual, como lo vimos en la sección 7. data &lt;- read.csv(file = &quot;ArticSoil.csv&quot;) Vamos a restructurar los datos rownames(data) &lt;- data[,1] samp2 &lt;- data[,-1] Transformaremos nuestros datos a una matriz para poder crear nuestro heatmap. mat_data &lt;- data.matrix(samp2[,1:ncol(samp2)]) mat_data ## Belgrano Esperanza Amundsen Wermadski Halley ## Actinobacteria 5960 400 3909 600 7000 ## Acidobacteria 567 3000 200 4006 29 ## Bacteroidetes 800 1000 100 1200 500 ## Deltaproteobacteria 70 30 5 40 78 Construyendo un heatmap básico pheatmap(mat_data) Con los comandos fontsize_col(columnas) y fontsize_row (filas), puedes cambiar el tamaño de letra y hacerlo más grande o más pequeño. pheatmap(mat_data, fontsize_col=6, fontsize_row=6) main te permite agregar el título al Heatmap. Recuerda que el título que eligas debe estar entre comillas pheatmap(mat_data, fontsize_col=10, fontsize_row=10, main = &quot;Mi primer heatmap&quot;) La escala de colores fríos generalmente se usa en los heatmaps. color te permite cambiar los colores de la gráfica. Aquí y aquí puedes revisar los colores disponibles en R que puedes usar en tus gráficas. pheatmap(mat_data, fontsize_col=10, fontsize_row=10, main = &quot;Mi primer Heatmap&quot;, color = c(&quot;blue&quot;, &quot;yellow&quot;,&quot;red&quot;)) Agregar o cambiar las líneas de los clusters con cluster_cols y cluster_rows pheatmap(mat_data, fontsize_col=10, fontsize_row=10, main = &quot;Mi primer heatmap&quot;, color = c(&quot;blue&quot;, &quot;yellow&quot;,&quot;red&quot;), cluster_cols=F, cluster_rows=T) pheatmap(mat_data, fontsize_col=10, fontsize_row=10, main = &quot;Mi primer heatmap&quot;, color = c(&quot;blue&quot;, &quot;yellow&quot;,&quot;red&quot;), cluster_cols=F, cluster_rows=F) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
